<?xml version="1.0" encoding="utf-8"?>
<project name="jgridstart" default="compile">
	<description>jGridStart build file</description>

	<!--
	  - Property definitions
	  -->
	<!-- display name -->
	<property name="target.title" value="jGridStart"/>
	<!-- internal name -->
	<property name="target.name" value="${ant.project.name}"/>
	<!-- the program's version -->
	<property name="target.version" value="1.0alpha1"/>
	<!-- main class to execute -->
	<property name="target.main" value="nl.nikhef.jgridstart.gui.Main"/>
	<!-- java virtual machine version to compile for -->
	<property name="target.jvmversion" value="1.5"/>
	
	<!-- Java Web Start base url (for use in JNLP files) -->
	<property name="wwwbase" value="http://www.nikhef.nl/~wvengen/jgridstart-devel/"/>
	
	<!-- location of source files -->
	<property name="dir.src" location="src"/>
	<!-- location of compiled classes -->
	<property name="dir.build" location="bin"/>
	<!-- location of output files for deployment -->
	<property name="dir.dist" location="deployment"/>
	<!-- location of thirdparty libraries -->
	<property name="dir.thirdparty" location="thirdparty"/>
	<!-- location of javadoc output -->
	<property name="dir.javadoc" location="doc"/>
	<!-- location of junit test output -->
	<property name="dir.testreports" location="testreports"/>

	<!-- extra tool definitions -->
	<property name="browsertool.target.name" value="browsertool"/>
	<property name="browsertool.target.main" value="nl.nikhef.jgridstart.install.BrowserTool"/>
	
	<property name="tests.target.name" value="tests"/>
	<property name="tests.target.main" value="nl.nikhef.jgridstart.AllTests"/>

	<!-- reference to property file defining the properties
	  -     keystore.file      java keystore file
	  -     keystore.passwd    password for accessing the java keystore
	  -     keystore.alias     alias pointing to certificate to sign with
	  -  if the property file cannot be found or does not define a keystore.file
	  -  that points to a file, a self-signed certificate is generated so you can 
	  -  get started easily. For production, of course, you'll need your own
	  -  secure certificate that users can trust. 
	  -  An example keystore.properties could be as follows:
	  -     keystore.file = ${dir.keystore}/keystore.ks
	  -     keystore.alias = default
	  -     keystore.passwd = mysecret
	  --> 
	<property name="dir.keystore" location=".."/>
	<property file="${dir.keystore}/keystore.properties"/>
	
	<!--
	  - dependencies
	  -->

	<property name="dep.bouncycastle" location="${dir.thirdparty}/bouncycastle/bcprov-jdk14-143.jar"/>
	<basename property="dep.bouncycastle.basename" file="${dep.bouncycastle}"/>
	<property name="dep.bouncycastle.smime" location="${dir.thirdparty}/bouncycastle/bcmail-jdk14-143.jar"/>
	<property name="dep.bouncycastle.tsp" location="${dir.thirdparty}/bouncycastle/bctsp-jdk14-143.jar"/>
	<property name="dep.javamail" location="${dir.thirdparty}/bouncycastle/mail-1.4.1.jar"/>
	<property name="dep.commons-cli" location="${dir.thirdparty}/commons/commons-cli-1.2.jar"/>
	<property name="dep.commons-lang" location="${dir.thirdparty}/commons/commons-lang-2.4.jar"/>
	<property name="dep.junit" location="${dir.thirdparty}/junit/junit-4.5.jar"/>
	<property name="dep.abbot" location="${dir.thirdparty}/junit/abbot.jar"/>
	<property name="dep.swingworker" location="${dir.thirdparty}/swingworker/swing-worker-1.2.jar"/>
	<property name="dep.xhtmlrenderer" location="${dir.thirdparty}/flyingsaucer/core-renderer-minimal.jar"/>
	<property name="dep.itext" location="${dir.thirdparty}/flyingsaucer/iText-2.0.8.jar"/>
	<property name="dep.winregistry" location="${dir.thirdparty}/winregistry/WinRegistry-3.4.jar"/>
	<property name="dep.apiviz" location="${dir.thirdparty}/javadoc/apiviz-1.3.0.GA.jar"/>
	<!-- activation framework is present in Java 1.6 and we don't use
	     it apart for resolving; so we can omit it when compiling there
	     to avoid ProGuard Warnings (which are fatal); so we need it for
	     lower versions. This is a little trick with ProGuard's jarfilter -->
	<property name="dep.activation" location="${dir.thirdparty}/bouncycastle/activation.jar"/>
	<path id="path.dependencies">
		<!-- TODO use jdk13 library versions and test -->
		<pathelement location="${dep.bouncycastle}"/>
		<pathelement location="${dep.bouncycastle.smime}"/>
			<pathelement location="${dep.javamail}"/>
		<pathelement location="${dep.commons-lang}"/>
		<pathelement location="${dep.commons-cli}"/>
		<pathelement location="${dep.junit}"/>
		<pathelement location="${dep.abbot}"/>
		<pathelement location="${dep.swingworker}"/> <!-- for java1.5 and below -->
		<pathelement location="${dep.xhtmlrenderer}"/>
			<pathelement location="${dep.itext}"/>
		<pathelement location="${dep.winregistry}"/>
	</path>
	
	<patternset id="distfiles">
		<!-- exclude non-production files -->
		<exclude name="**/test*"/>
		<exclude name="**/*test/**"/>
		<exclude name="**/*tests/**"/>
		<exclude name="**/package.html"/>
		<exclude name="**/*Test.class"/>
		<exclude name="**/*Test$*.class"/>
		<exclude name="**/AllTests.class"/>
		<exclude name="**/AllTests$*.class"/>
		<exclude name="**/CVS"/>
		<exclude name="**/.svn"/>
	</patternset>
	
	<!-- files to include as dependencies in jars -->
	<resources id="depfiles">
		<zipfileset src="${dep.commons-lang}" includes="**/*.class"/>
		<zipfileset src="${dep.commons-cli}" includes="**/*.class"/>
		<zipfileset src="${dep.swingworker}" includes="**/*.class"/>
		<zipfileset src="${dep.xhtmlrenderer}">
			<include name="**/*.class"/>
				<exclude name="**/tool/**"/>
			<exclude name="**/swt/**"/>
			<exclude name="**/SWT**"/>
		</zipfileset>
		<zipfileset src="${dep.itext}">
			<include name="**/*.class"/>
			<include name="**/fonts/*"/>
			<exclude name="**/tools/**"/>
		</zipfileset>
		<zipfileset src="${dep.winregistry}" includes="**/*.class"/>
		<!-- iText needs some org.bouncycastle.cms classes but some other classes in this
		     package reference javax.mail which we don't want to include as well (so that
		     ProGuard can resolve them). Solution: only include part of the smime package.
		     In addition to this, certificate renewal also requires S/MIME mail stuff. -->
		<zipfileset src="${dep.bouncycastle.smime}">
			<include name="org/bouncycastle/cms/**"/>
			<include name="org/bouncycastle/mail/smime/*.class/"/>
			<include name="org/bouncycastle/mail/smime/util/*.class/"/>
		</zipfileset>
		<zipfileset src="${dep.bouncycastle.tsp}" includes="**/*.class"/>
		<zipfileset src="${dep.javamail}" includes="**/*.class"/>
		<zipfileset src="${dep.activation}" includes="**/*.class"/>
	</resources>
	

	<!--
	  - Initialisation and other setup
	  -->

	<!-- keystore; create one if not supplied -->
	<available file="${keystore.file}" type="file" property="keystore.available"/>
	<target name="keystore" unless="keystore.available">
		<tempfile property="keystore.file" prefix="keystore" suffix=".ks"/>
		<property name="keystore.tempfile" value="${keystore.file}"/>
		<property name="keystore.alias" value="default"/>
		<property name="keystore.passwd" value="xyz12345"/>
		<genkey alias="${keystore.alias}" storepass="${keystore.passwd}" keystore="${keystore.file}"
			validity="1" dname="CN=Test, OU=Test, O=Test, C=Test"/>
	</target>

	<!-- proguard -->
	<taskdef resource="proguard/ant/task.properties"
		classpath="${dir.thirdparty}/proguard/proguard.jar"/>
	<!-- subversion -->
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml">
		<classpath><fileset dir="${dir.thirdparty}/svnant">
			<include name="*.jar"/>
		</fileset></classpath>
	</typedef>
	<svn failonerror="false"><wcVersion path="." prefix="svn."/></svn>
	<property name="target.revision" value="${svn.revision.range}"/>
	<!-- timestamp -->
	<target name="init">
		<tstamp/>
	</target>
	
	<!--
	  - Compilation target
	  -->
	<target name="compile" depends="init">
		<mkdir dir="${dir.build}"/>
		<!-- compile java sources -->
		<javac srcdir="${dir.src}" destdir="${dir.build}" target="${target.jvmversion}">
			<classpath refid="path.dependencies" />
		</javac>
		<!-- copy resources; skip VCS dirs (and other hidden .*)  -->
		<copy todir="${dir.build}">
			<fileset dir="${dir.src}">
				<exclude name="**/*.java"/>
				<exclude name="**/CVS"/>
				<exclude name="**/.*"/>
				<exclude name="resources/conf/global.properties"/>
			</fileset>
		</copy>
		<!-- set global variables from build -->
		<copy file="${dir.src}/resources/conf/global.properties"
		      tofile="${dir.build}/resources/conf/global.properties">
			<filterchain>
				<replacetokens>
					<token key="jgridstart.version" value="${target.version}"/>
					<token key="jgridstart.revision" value="${target.revision}"/>
				</replacetokens>
			</filterchain>
		</copy>
	</target>
	
	<!--
	  -  Full JAR creation target
	  -->
	<target name="jar.large" depends="compile">
		<jar jarfile="${dir.dist}/${target.name}.large.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Main-Class" value="${target.main}"/>
				<attribute name="Class-Path" value="${dep.bouncycastle.basename}"/>
			</manifest>
			<fileset dir="${dir.build}">
				<patternset refid="distfiles"/>
			</fileset>
			<resources refid="depfiles"/>
		</jar>
	</target>
	
	<!--
	  - ProGuard-minimised JAR creation
	  -->
	<target name="jar.small" depends="jar.large">
		<!-- minimize jar file; skipnonpubliclibraryclasses needed for java1.6 -->
		<proguard obfuscate="false" skipnonpubliclibraryclasses="false">
			<injar file="${dir.dist}/${target.name}.large.jar"/>
			<outjar file="${dir.dist}/${target.name}.small.jar"/>
			<libraryjar file="${java.home}/lib/rt.jar"/>
			<libraryjar file="${java.home}/lib/jce.jar"/>
			<libraryjar file="${java.home}/lib/jsse.jar"/>
			<libraryjar file="${dep.bouncycastle}"/>
			<libraryjar file="${dep.junit}"/>
			<libraryjar file="${dep.abbot}"/>
			<keepclasseswithmembers access="public">
				<method access="public static" type="void"
					name="main" parameters="java.lang.String[]"/>
			</keepclasseswithmembers>
			<!-- Somehow xhtmlrenderer classes are stripped too much, this is a workaround. Error e.g.
			     "Invalid index 2 in LocalVariableTable in class file org/xhtmlrenderer/render/Box" -->
			<keepclasseswithmembers name="org.xhtmlrenderer.render.Box">
				<method name="*"/>
			</keepclasseswithmembers>
			<keepclasseswithmembers name="org.xhtmlrenderer.swing.NaiveUserAgent">
				<method name="*"/>
			</keepclasseswithmembers>
			<keepclasseswithmembers name="org.xhtmlrenderer.css.**">
				<method name="*"/>
			</keepclasseswithmembers>
			<keepclasseswithmembers name="org.xhtmlrenderer.newtable.**">
				<method name="*"/>
			</keepclasseswithmembers>
			<keepclasseswithmembers name="org.xhtmlrenderer.resource.XMLResource**">
				<method name="*"/>
			</keepclasseswithmembers>
			<!-- logging is dynamically configured -->
			<keepclasseswithmembers access="public" name="org.xhtmlrenderer.util.XRSimpleLogFormatter">
				<method name="*"/>
			</keepclasseswithmembers>
			<keepclasseswithmembers access="public" name="org.xhtmlrenderer.util.Configuration">
				<method name="*"/>
			</keepclasseswithmembers>
			<!-- CA class used is set in configfile -->
			<keepclasseswithmembers name="nl.nikhef.jgridstart.ca.**">
				<method name="*"/>
			</keepclasseswithmembers>
		</proguard>
	</target>

	<!--
	  - Distribution creation target
	  -->
	<target name="dist" depends="keystore,jar.small">
		<!-- copy large/small jar to distribution -->
		<copy file="${dir.dist}/${target.name}.small.jar" tofile="${dir.dist}/${target.name}.jar"/>
		<!-- sign it, required for java web start -->
		<signjar keystore="${keystore.file}" jar="${dir.dist}/${target.name}.jar"
			alias="${keystore.alias}" storepass="${keystore.passwd}"/>
		<delete file="${keystore.tempfile}" quiet="true"/>
		<!-- substitute variables in java web start files -->
		<copy file="${dir.dist}/${target.name}.jnlp.in" tofile="${dir.dist}/${target.name}.jnlp" />
		<copy file="${dir.dist}/bcprov.jnlp.in" tofile="${dir.dist}/bcprov.jnlp" />
		<replace dir="${dir.dist}">
			<include name="${target.name}.jnlp"/>
			<include name="bcprov.jnlp"/>
			<replacefilter token="@wwwbase@" value="${wwwbase}"/>
			<replacefilter token="@main@" value="${target.main}"/>
		</replace>
		<!-- copy bouncycastle jar to deployment area -->
		<copy file="${dep.bouncycastle}" todir="${dir.dist}"/>
	</target>

	<!--
	  - Cleaning target
	  -->
	<target name="clean">
		<delete dir="${dir.build}"/>
		<delete file="${dir.dist}/${target.name}.jar"/>
		<delete file="${dir.dist}/${target.name}.jnlp"/>
		<delete file="${dir.dist}/bcprov.jnlp"/>
		<delete file="${dir.dist}/${dep.bouncycastle.basename}"/>
		<delete file="${dir.dist}/${browsertool.target.name}.jar"/>
		<delete file="${dir.dist}/${tests.target.name}.jar"/>
	</target>

	<!--
	  - extra targets
	  -->
	<!-- browsertool -->
	<target name="browsertool" depends="compile">
		<jar jarfile="${dir.dist}/${browsertool.target.name}.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Main-Class" value="${browsertool.target.main}"/>
			</manifest>
			<fileset dir="${dir.build}">
				<patternset refid="distfiles"/>
				<include name="nl/nikhef/jgridstart/install/**"/>
				<include name="nl/nikhef/jgridstart/util/**"/>
			</fileset>
			<zipfileset src="${dep.commons-cli}" includes="**/*.class"/>
			<zipfileset src="${dep.winregistry}" includes="**/*.class"/>
		</jar>
		<!-- sign it, required for java web start -->
		<signjar keystore="${keystore.file}" jar="${dir.dist}/${browsertool.name}.jar"
			alias="${keystore.alias}" storepass="${keystore.passwd}"/>
	</target>
	
	<!-- archive with unit tests -->
	<target name="jar.tests" depends="compile">
		<jar jarfile="${dir.dist}/${tests.target.name}.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Main-Class" value="${tests.target.main}"/>
				<attribute name="Class-Path" value="${dep.bouncycastle.basename}"/>
			</manifest>
			<fileset dir="${dir.build}"/>
			<resources refid="depfiles"/>
			<zipfileset src="${dep.junit}" includes="**/*.class"/>
			<zipfileset src="${dep.abbot}" includes="**/*.class"/>
		</jar>
	</target>

	<!-- javadoc with APIviz, needs graphviz >= 2.20 -->
	<target name="javadoc" depends="compile">
		<javadoc
				destdir="${dir.javadoc}"
				classpathref="path.dependencies"
				access="protected" source="${target.jvmversion}"
				doclet="org.jboss.apiviz.APIviz" docletpath="${dep.apiviz}" additionalparam="-sourceclasspath ${dir.build}">
			<sourcefiles>
				<fileset dir="${dir.src}">
					<include name="**/*.java"/>
					<exclude name="**/*Test.*"/>
					<exclude name="**/AllTests.*"/>
				</fileset>
			</sourcefiles>
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
			<link href="http://bouncycastle.org/docs/docs1.4/"/>
			<link href="http://bouncycastle.org/docs/mdocs1.4/"/>
			<link href="http://commons.apache.org/lang/api-release/"/>
			<link href="http://commons.apache.org/cli/api-1.2/"/>
			<link href="http://junit.org/junit/javadoc/4.5/"/>
			<link href="http://abbot.sourceforge.net/doc/api/"/>
			<link href="https://swingworker.dev.java.net/nonav/javadoc/"/>
			<link href="http://pigeonholdings.com/projects/flyingsaucer/R8/javadoc/user/"/>
			<link href="http://www.1t3xt.info/api/"/>
			<link href="http://java.sun.com/products/javamail/javadocs/"/>
			<!-- no online javadoc found for WinRegistry -->
		</javadoc>
	</target>
	
	<!-- test report -->
	<target name="testreport" depends="compile">
		<junit fork="yes" haltonfailure="no">
			<test fork="yes" todir="${dir.testreports}" name="nl.nikhef.jgridstart.AllTests"/>
			<formatter type="xml"/>
			<classpath refid="path.dependencies"/>
			<classpath path="${dir.build}"/>
		</junit>
	</target>
</project>
